#!/usr/bin/env node
const path = require('path');
const s3Helper = require('./s3-helper');
const mongodump = require('./mongodump');
const { MongoClient } = require('mongodb');
const userHelper = require('./user-helper');
const mongoHelper = require('./mongo-helper');
const { ensureEnv } = require('./env-helper');
const { S3, Credentials } = require('aws-sdk');

const dumpDir = path.resolve('./dump');

const ensureConfigForEnv = env => {
  const sanitizedEnv = (env || '').trim().toUpperCase();

  return {
    dbUri: ensureEnv(`DB_URI_${sanitizedEnv}`),
    dbName: ensureEnv(`DB_NAME_${sanitizedEnv}`),
    s3BucketName: ensureEnv(`S3_BUCKET_NAME_${sanitizedEnv}`)
  };
};

const getConfigFromParsingArguments = () => {
  const args = process.argv;
  const from = args.indexOf('-from');
  const to = args.indexOf('-to');
  const fromEnv = args[from + 1];
  const toEnv = args[to + 1];

  if (from === -1 || to === -1 || !fromEnv || !toEnv) {
    throw new Error('Expected arguments: -from \'fromEnvironment\' -to \'toEnvironment\'');
  }

  const fromConfig = ensureConfigForEnv(fromEnv);
  const toConfig = ensureConfigForEnv(toEnv);

  return {
    s3Config: {
      endpoint: ensureEnv('S3_ENDPOINT'),
      region: ensureEnv('S3_REGION'),
      accessKey: ensureEnv('S3_ACCESS_KEY'),
      secretKey: ensureEnv('S3_SECRET_KEY')
    },
    dumpEnv: fromConfig,
    restoreEnv: toConfig
  };
};

(async () => {

  const { s3Config, dumpEnv, restoreEnv } = getConfigFromParsingArguments();

  console.log(`Copying from\n${JSON.stringify(dumpEnv)}\nto\n${JSON.stringify(restoreEnv)}`);

  await mongodump.dump({
    uri: dumpEnv.dbUri,
    directory: dumpDir,
    db: dumpEnv.dbName
  });

  await mongodump.restore({
    uri: restoreEnv.dbUri,
    directory: dumpDir,
    fromDb: dumpEnv.dbName,
    toDb: restoreEnv.dbName
  });

  const mongoClient = await MongoClient.connect(restoreEnv.dbUri, { useUnifiedTopology: true });
  const db = mongoClient.db();
  const usersCollection = await db.collection('users');

  const users = await usersCollection.find({}).toArray();
  const anonymizeUsers = await userHelper.anonymizeUsers(users);

  for (const user of anonymizeUsers) {
    console.log(`Creating user ${user.username}`);
    // eslint-disable-next-line no-await-in-loop
    await mongoHelper.upsertItemById(usersCollection, user);
  }

  await mongoClient.close();

  const s3 = new S3({
    apiVersion: '2006-03-01',
    endpoint: s3Config.endpoint,
    region: s3Config.region,
    credentials: new Credentials(s3Config.accessKey, s3Config.secretKey)
  });

  const oldObjects = await s3Helper.listAllObjects(s3, restoreEnv.s3BucketName);
  for (const obj of oldObjects) {
    console.log(`Deleting object ${obj.Key}`);
    // eslint-disable-next-line no-await-in-loop
    await s3Helper.deleteObject(s3, restoreEnv.s3BucketName, obj.Key);
  }

  const sourceObjects = await s3Helper.listAllObjects(s3, dumpEnv.s3BucketName);
  for (const obj of sourceObjects) {
    console.log(`Copying object ${obj.Key}`);
    // eslint-disable-next-line no-await-in-loop
    await s3Helper.copyObject(s3, dumpEnv.s3BucketName, obj.Key, restoreEnv.s3BucketName);
  }

})();
